0. Symbols
===     the goal
!!!     point need to consider in order to achieve the goal
.       point
-       steps
+       sub steps
*       smaller steps
!!      watch out!
#       notes

1. Testing
1.1. Testing 101
. setUp function in TestCase will run before every test -> use it to init some fields, objects that needed in multiple
    test case so we don't have to repeat code

1.2. unittest.mock patch
- Using patch decorator to override the behavior of call


2. Custom model
2.1. User (not superuser)
# https://docs.djangoproject.com/en/3.2/topics/auth/customizing/
# from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin

=== Create a custom User model for our app that use "email" as username instead of Django's
    default "username"

!!! UserManager class will provide helpers to create app's user and superuser => When having a custom user we need to
    override those base helpers too
    - Override "create_user" function of BaseUserManager

!!! Our custom User model will inherit "AbstractBaseUser" and "PermissionsMixin" to have all the feature from Django's
    user model
    - Declare our User's fields
    - Make sure "objects" is our custom UserManager class as well
    - Override custom User "USERNAME" as our email

!!! AUTH_USER_MODEL in settings.py need to point to our custom User model

!!! To create the superuser we also need to add create function to our custom UserManager model
    # is_superuser is PermissionsMixin's field

!! get_user_model() method from django.contrib.auth will return the custom user model we just created if we register it
    in the app's settings

2.2. Admin
# https://docs.djangoproject.com/en/3.2/ref/contrib/admin/
# from django.contrib import admin
# from django.contrib.auth.admin import UserAdmin as BaseUserAdmin

=== When User is customized, admin user will also need to be customized to apply that custom User model

3. API
3.1. User
!!! rest_framework serializers defined some Serializers class for us to inherit so that the response we made are parsed
    in JSON
    - Our serializer (UserSerializer) for custom user class will inherit ModelSerializer
        !! ModelSerializer will have a "Meta" class to specify which field will be parsed to json in our response and
            which model the serializer is referring to
        # https://www.django-rest-framework.org/api-guide/serializers/#modelserializer
    - We will also want to override the create function to have the right validation behavior

!!! After creating the serializer, use rest_framework generics.CreateAPIView with serializer_class as the
    UserSerializer we just create. With this rest_framework will create that create user view for us
** admin.site.register({our custom User model}, {our custom UserAdmin})

3.2. Token
!!! Create an AuthTokenSerializer inherit rest_framework Serializer, and have its validate function override and
    create CreateTokenView inherit ObtainAuthToken with that serializer we just create

*** Commands
- test: docker-compose run --rm app sh -c "python manage.py test"
- migrate: docker-compose run --rm app sh -c "python manage.py makemigrations core"


################# Learning queue ###################
1. Read about docker-compose
2. Django (?), django-rest-framework authentication methods
